Bài toán di chuyển toa tàu (hình dưới): Các toa được đánh số từ 1 đến n, đường di chuyển có
thể là các vạch đỏ. Ta cần di chuyển các toa từ A -> C sao cho tại C các toa tàu được sắp xếp các
thứ tự mới nào đó. Hãy nhập vào thứ tự tại C cần có, cho biết có cách chuyển không ? Nếu có, hãy
trình bày cách chuyển.
Trong hình là kiểu thuật toán Stack , Đường đi 1 chiều A->C, A->B, B->C
Trong B là 1 kiểu stack từ xuống lên trên, A là queue, C cũng là queue

Ví dụ: n = 4 và thứ tự cần có (1, 4, 3, 2)
A: 1 2 3 4
B: emty
C: emty
A->C: Từ A thì 1 qua C thì A còn 2 3 4
A->B: Từ A thì 2 qua B thì A còn 3 4, B: 2, C: 1
A->B: Từ A thì 3 qua B thì A còn 4, B: 3 2, C: 1
A->C: Từ A thì 4 qua C thì A: emty, B: 3 2, C: 1 4
B->C: Từ B thì 3 qua C thì A: emty, B: 2, C: 1 4 3
B->C: Từ B thì 2 qua C thì A: emty, B: emty, C: 1 4 3 2
Suy là ta có thứ tự cần có là 1 4 3 2 trong C

Bài 3: Tương tự yêu cầu bài 2 nhưng với hình bên trên:
Đường đi 1 chiều A->C, A->B, B->C nhưng B lần này là kiểu queue phải qua trái
Ví dụ: n = 4 và thứ tự cần có (1, 4, 2, 3)
A: 1 2 3 4
B: emty
C: emty
A->C: Từ A thì 1 qua C thì A còn 2 3 4
A->B: Từ A thì 2 qua B thì A còn 3 4, B: 2, C: 1
A->B: Từ A thì 3 qua B thì A còn 4, B: 2 3, C: 1
A->C: Từ A thì 4 qua C thì A: emty, B: 2 3, C: 1 4
B->C: Từ B thì 2 qua C thì A: emty, B: 3, C: 1 4 2
B->C: Từ B thì 3 qua C thì A: emty, B: emty, C: 1 4 2 3


Hãy làm bài code C++
Yêu cầu: BFS_DFS_Pseudocode.h, TrainMovement.cpp, TrainMovement.h, main.cpp

Ta có BFS_DFS_Pseudocode.h hãy tận dung file này
/*****************BFS (Breadth-First Search)**************/
BFS(u)
{
    // Step 1: Khởi tạo
    Khởi tạo queue rỗng;
    enqueue(queue, u); // Đẩy đỉnh u vào hàng đợi
    visited[u] = true; // Đánh dấu là đỉnh u đã được duyệt

    // Step 2: Lặp khi mà hàng đợi vẫn còn phần tử
    while( queue khác rỗng)
	{
        v = queue.front(); // Lấy ra đỉnh ở đầu hàng đợi
        dequeue(queue); // Xóa đỉnh khỏi đầu hàng đợi
        Duyệt đỉnh v;
        
        // Duyệt các đỉnh kề với v mà chưa được duyệt và đẩy vào hàng đợi
        for(int x : ke[v])
		{
            if( !visited[x]) // Nếu x chưa được duyệt
			{ 
                enqueue(queue, x);
                visited[x] = true;
            }
        }
    }
}

/**********DFS-Depth-First Search****************/
// Bat dau duyet tu dinh u
DFS(u)
{
    Duyet Dinh u;
    visited[u] = true; // Danh dau u da dc duyet
    // Duyet cac dinh ke cua dinh u
    for(v : adj[u])
	{
        if(!visited[v]) // Neu v chua duoc duyet
		{ 
            DFS(v);
        }
    }
}

/**********DFS-Depth-First Search using Stack****************/
DFS(u)
{
    Khởi tạo stack rỗng;
    push(stack, u); // Đẩy đỉnh u vào stack
    while(stack khác rỗng)
	{
        v = stack.pop(); // Lấy đỉnh ở đầu stack và xóa khỏi stack
        if(!visited[v])// Nếu đỉnh v chưa được duyệt
		{ 
            Duyệt đỉnh v;
            visited[v] = true; // Đánh dấu đỉnh v là đã được duyệt
            // Đẩy các đỉnh kề với v vào stack
            for(w : adj[v])
			{
                if(!visited[w])
				{
                    push(stack, w);
                }
            }
        }
    }
}

